// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by `make model`. DO NOT EDIT.
// This file contains generated code based on the model.{{.Type}} struct.

package model

import "encoding/json"

{{range .CustomTypes}}
{{if customType .Name}}type {{.Name}} {{.UnderlyingType}}
{{end}}{{end}}

type {{.Type}} struct {
   {{range .Fields}} {{.Name}} {{processType .Type}}
   {{end}}
}

// {{.Type}}Initializer provides a container struct to initialize a new {{.Type}} object.
type {{.Type}}Initializer struct {
    {{range .Fields}}{{public .Name}}  {{.Type}} {{json .Tags}}
    {{end}}
}

{{ if include_patch .Fields}}
// {{.Type}}Patch is a struct to patch a {{.Type}} object.
type {{.Type}}Patch struct {
    {{range .Fields}}{{if patch_field .Tags}}{{public .Name}} *{{.Type}} {{json .Tags}}
    {{end}}{{end}}
}
{{end}}
// New{{.Type}} creates a new instance of {{.Type}} populated with the values from a
// {{.Type}}Initializer instance.
func New{{.Type}}({{receiver .Type}} *{{.Type}}Initializer) *{{.Type}} {
    dst := &{{.Type}} {
        {{range .Fields}}{{.Name}}: {{generateInitializer  $.Type .Name .Type}},
        {{end}}
    }
    return dst
}

func ({{receiver .Type}} *{{.Type}}) clone() *{{.Type}} {
    dst := &{{.Type}} {
        {{range .Fields}}{{.Name}}: {{receiver $.Type}}.{{.Name}},
        {{end}}
    }
    return dst
}

{{ if include_patch .Fields}}
// ------------------------ Patch object ------------------------ //

// Apply applies the patch to the object, returning modified instance
func ({{receiver .Type}} *{{.Type}}) Apply(p *{{.Type}}Patch) *{{.Type}} {
    copy := {{receiver .Type}}.clone()
    if p == nil {
        return copy
    }
    {{range .Fields}} {{if patch_field .Tags}}if p.{{public .Name}} != nil {
        {{receiver $.Type}}.{{.Name}} = *p.{{public .Name}}
    }
    {{end}}
    {{end}} 
    return copy
}
{{end}}
// ---------------------- Property Getters ---------------------- //
{{range .Fields}}
// {{public .Name}} gets the {{public .Name}} property of the {{$.Type}}
func ({{receiver $.Type}} *{{$.Type}}) {{public .Name}}() {{.Type}} {
	return {{receiver $.Type}}.{{.Name}}{{generateGetStatement .Type}}
}
{{end}}

// ---------------------- Property Setters ---------------------- //
{{range .Fields}}
// Set{{public .Name}} sets the {{public .Name}} property of the {{$.Type}} and returns new instance
func ({{receiver $.Type}} *{{$.Type}}) With{{public .Name}}(v {{.Type}}) *{{$.Type}} {
    copy := {{receiver $.Type}}.clone()
    copy.{{.Name}}{{generateSetStatement .Type}}
	return copy
}
{{end}}

// ------------------ JSON Processing Functions ------------------ //

func ({{receiver .Type}} *{{.Type}}) UnmarshalJSON(b []byte) (error) {
    var data *{{.Type}}Initializer
    err := json.Unmarshal(b, data)
    if err != nil {
        return err
    }
    *{{receiver .Type}} = *New{{.Type}}(data)
    return nil
}

func ({{receiver .Type}} *{{.Type}}) MarshalJSON() ([]byte, error) {
    return json.Marshal(&{{.Type}}Initializer{
        {{range .Fields}}{{public .Name}}: {{receiver $.Type}}.{{.Name}}{{generateGetStatement .Type}},
        {{end}}
    })
}

{{range $key, $value := sliceTypes .Fields}}
    type {{$key}} interface  {   
    Len() int
    Get(i int) {{$value}}
    Set(i int, v {{$value}}) *{{$key}}
    Replace(v []{{$value}}) *{{$key}}
    Range() []{{$value}}
    Append(v ...{{$value}}) *{{$key}}
    }
    func New{{$key}}([]{{$value}}) {{$key}} {
        // TODO: implement
        return nil
    }
{{end}}